# Stubs for py4j.java_gateway (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import logging
from py4j.compat import CompatThread
from threading import Thread
from typing import Any, Optional

class NullHandler(logging.Handler):
    def emit(self, record: Any) -> None: ...

null_handler: Any
logger: Any
BUFFER_SIZE: int
DEFAULT_ADDRESS: str
DEFAULT_PORT: int
DEFAULT_PYTHON_PROXY_PORT: int
DEFAULT_ACCEPT_TIMEOUT_PLACEHOLDER: str
DEFAULT_CALLBACK_SERVER_ACCEPT_TIMEOUT: int
PY4J_SKIP_COLLECTIONS: str
PY4J_TRUE: Any
server_connection_stopped: Any
server_connection_started: Any
server_connection_error: Any
server_started: Any
server_stopped: Any
pre_server_shutdown: Any
post_server_shutdown: Any

def get_create_new_process_group_kwargs(): ...
def set_reuse_address(server_socket: Any) -> None: ...
def set_default_callback_accept_timeout(accept_timeout: Any) -> None: ...
def deprecated(name: Any, last_version: Any, use_instead: str = ..., level: Any = ..., raise_exc: bool = ...) -> None: ...
def java_import(jvm_view: Any, import_str: Any): ...
def find_jar_path(): ...
def launch_gateway(port: int = ..., jarpath: str = ..., classpath: str = ..., javaopts: Any = ..., die_on_exit: bool = ..., redirect_stdout: Optional[Any] = ..., redirect_stderr: Optional[Any] = ..., daemonize_redirect: bool = ..., java_path: str = ..., create_new_process_group: bool = ..., enable_auth: bool = ...): ...
def get_field(java_object: Any, field_name: Any): ...
def set_field(java_object: Any, field_name: Any, value: Any): ...
def get_method(java_object: Any, method_name: Any): ...
def is_instance_of(gateway: Any, java_object: Any, java_class: Any): ...
def get_java_class(java_class: Any): ...
def quiet_close(closable: Any): ...
def quiet_shutdown(socket_instance: Any): ...
def set_linger(a_socket: Any) -> None: ...
def check_connection(a_socket: Any, read_timeout: Any) -> None: ...
def gateway_help(gateway_client: Any, var: Any, pattern: Optional[Any] = ..., short_name: bool = ..., display: bool = ...): ...
def do_client_auth(command: Any, input_stream: Any, sock: Any, auth_token: Any): ...

class OutputConsumer(CompatThread):
    redirect: Any = ...
    stream: Any = ...
    redirect_func: Any = ...
    def __init__(self, redirect: Any, stream: Any, *args: Any, **kwargs: Any) -> None: ...
    def run(self) -> None: ...

class ProcessConsumer(CompatThread):
    proc: Any = ...
    closable_list: Any = ...
    def __init__(self, proc: Any, closable_list: Any, *args: Any, **kwargs: Any) -> None: ...
    def run(self) -> None: ...

class GatewayParameters:
    address: Any = ...
    port: Any = ...
    auto_field: Any = ...
    auto_close: Any = ...
    auto_convert: Any = ...
    eager_load: Any = ...
    ssl_context: Any = ...
    enable_memory_management: Any = ...
    read_timeout: Any = ...
    auth_token: Any = ...
    def __init__(self, address: Any = ..., port: Any = ..., auto_field: bool = ..., auto_close: bool = ..., auto_convert: bool = ..., eager_load: bool = ..., ssl_context: Optional[Any] = ..., enable_memory_management: bool = ..., read_timeout: Optional[Any] = ..., auth_token: Optional[Any] = ...) -> None: ...

class CallbackServerParameters:
    address: Any = ...
    port: Any = ...
    daemonize: Any = ...
    daemonize_connections: Any = ...
    eager_load: Any = ...
    ssl_context: Any = ...
    accept_timeout: Any = ...
    read_timeout: Any = ...
    propagate_java_exceptions: Any = ...
    auth_token: Any = ...
    def __init__(self, address: Any = ..., port: Any = ..., daemonize: bool = ..., daemonize_connections: bool = ..., eager_load: bool = ..., ssl_context: Optional[Any] = ..., accept_timeout: Any = ..., read_timeout: Optional[Any] = ..., propagate_java_exceptions: bool = ..., auth_token: Optional[Any] = ...) -> None: ...

class DummyRLock:
    def __init__(self) -> None: ...
    def acquire(self, blocking: int = ...) -> None: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type: Any, value: Any, tb: Any) -> None: ...

class GatewayConnectionGuard:
    def __init__(self, client: Any, connection: Any) -> None: ...
    def __enter__(self): ...
    def read(self, hint: int = ...): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...

class GatewayClient:
    gateway_parameters: Any = ...
    address: Any = ...
    port: Any = ...
    is_connected: bool = ...
    auto_close: Any = ...
    gateway_property: Any = ...
    ssl_context: Any = ...
    deque: Any = ...
    def __init__(self, address: Any = ..., port: Any = ..., auto_close: bool = ..., gateway_property: Optional[Any] = ..., ssl_context: Optional[Any] = ..., gateway_parameters: Optional[Any] = ...) -> None: ...
    def garbage_collect_object(self, target_id: Any) -> None: ...
    def shutdown_gateway(self) -> None: ...
    def send_command(self, command: Any, retry: bool = ..., binary: bool = ...): ...
    def close(self) -> None: ...

class GatewayConnection:
    gateway_parameters: Any = ...
    address: Any = ...
    port: Any = ...
    socket: Any = ...
    is_connected: bool = ...
    auto_close: Any = ...
    gateway_property: Any = ...
    wr: Any = ...
    def __init__(self, gateway_parameters: Any, gateway_property: Optional[Any] = ...) -> None: ...
    stream: Any = ...
    def start(self) -> None: ...
    def close(self, reset: bool = ...) -> None: ...
    def shutdown_gateway(self) -> None: ...
    def send_command(self, command: Any): ...

class JavaMember:
    name: Any = ...
    container: Any = ...
    target_id: Any = ...
    gateway_client: Any = ...
    command_header: Any = ...
    pool: Any = ...
    converters: Any = ...
    def __init__(self, name: Any, container: Any, target_id: Any, gateway_client: Any) -> None: ...
    @property
    def __doc__(self): ...
    def stream(self, *args: Any): ...
    def __call__(self, *args: Any): ...

class JavaObject:
    def __init__(self, target_id: Any, gateway_client: Any) -> None: ...
    @property
    def __doc__(self): ...
    def __getattr__(self, name: Any): ...
    def __dir__(self): ...
    def __eq__(self, other: Any): ...
    def __hash__(self): ...

class JavaClass:
    def __init__(self, fqn: Any, gateway_client: Any) -> None: ...
    @property
    def __doc__(self): ...
    def __dir__(self): ...
    def __getattr__(self, name: Any): ...
    def __call__(self, *args: Any): ...

class UserHelpAutoCompletion:
    KEY: str = ...

class JavaPackage:
    def __init__(self, fqn: Any, gateway_client: Any, jvm_id: Optional[Any] = ...) -> None: ...
    def __dir__(self): ...
    def __getattr__(self, name: Any): ...

class JVMView:
    def __init__(self, gateway_client: Any, jvm_name: Any, id: Optional[Any] = ..., jvm_object: Optional[Any] = ...) -> None: ...
    def __dir__(self): ...
    def __getattr__(self, name: Any): ...

class GatewayProperty:
    auto_field: Any = ...
    pool: Any = ...
    enable_memory_management: Any = ...
    def __init__(self, auto_field: Any, pool: Any, enable_memory_management: bool = ...) -> None: ...

class JavaGateway:
    gateway_parameters: Any = ...
    callback_server_parameters: Any = ...
    python_server_entry_point: Any = ...
    gateway_property: Any = ...
    def __init__(self, gateway_client: Optional[Any] = ..., auto_field: bool = ..., python_proxy_port: Any = ..., start_callback_server: bool = ..., auto_convert: bool = ..., eager_load: bool = ..., gateway_parameters: Optional[Any] = ..., callback_server_parameters: Optional[Any] = ..., python_server_entry_point: Optional[Any] = ...) -> None: ...
    entry_point: Any = ...
    java_gateway_server: Any = ...
    jvm: Any = ...
    def set_gateway_client(self, gateway_client: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def get_callback_server(self): ...
    def start_callback_server(self, callback_server_parameters: Optional[Any] = ...): ...
    def new_jvm_view(self, name: str = ...): ...
    def new_array(self, java_class: Any, *dimensions: Any): ...
    def shutdown(self, raise_exception: bool = ...) -> None: ...
    def shutdown_callback_server(self, raise_exception: bool = ...): ...
    def close_callback_server(self, raise_exception: bool = ...): ...
    def restart_callback_server(self) -> None: ...
    def close(self, keep_callback_server: bool = ..., close_callback_server_connections: bool = ...) -> None: ...
    def detach(self, java_object: Any) -> None: ...
    def help(self, var: Any, pattern: Optional[Any] = ..., short_name: bool = ..., display: bool = ...): ...
    @classmethod
    def launch_gateway(cls, port: int = ..., jarpath: str = ..., classpath: str = ..., javaopts: Any = ..., die_on_exit: bool = ..., redirect_stdout: Optional[Any] = ..., redirect_stderr: Optional[Any] = ..., daemonize_redirect: bool = ..., java_path: str = ..., create_new_process_group: bool = ..., enable_auth: bool = ...): ...

class CallbackServer:
    gateway_client: Any = ...
    callback_server_parameters: Any = ...
    port: Any = ...
    address: Any = ...
    ssl_context: Any = ...
    pool: Any = ...
    connections: Any = ...
    lock: Any = ...
    is_shutdown: bool = ...
    is_shutting_down: bool = ...
    def __init__(self, pool: Any, gateway_client: Any, port: Any = ..., address: Any = ..., callback_server_parameters: Optional[Any] = ...) -> None: ...
    server_socket: Any = ...
    thread: Any = ...
    def start(self) -> None: ...
    def get_listening_port(self): ...
    def get_listening_address(self): ...
    def run(self) -> None: ...
    def close(self) -> None: ...
    def shutdown(self): ...

class CallbackConnection(Thread):
    pool: Any = ...
    input: Any = ...
    socket: Any = ...
    gateway_client: Any = ...
    callback_server_parameters: Any = ...
    callback_server: Any = ...
    daemon: Any = ...
    def __init__(self, pool: Any, input: Any, socket_instance: Any, gateway_client: Any, callback_server_parameters: Any, callback_server: Any) -> None: ...
    def run(self) -> None: ...
    def close(self, reset: bool = ...) -> None: ...

class PythonProxyPool:
    lock: Any = ...
    dict: Any = ...
    next_id: int = ...
    def __init__(self) -> None: ...
    def put(self, object: Any, force_id: Optional[Any] = ...): ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def clear(self) -> None: ...
    def __contains__(self, key: Any): ...
    def __len__(self): ...
