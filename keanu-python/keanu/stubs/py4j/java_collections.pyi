# Stubs for py4j.java_collections (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import MutableMapping, MutableSequence, MutableSet, Sequence
from py4j.java_gateway import JavaObject
from typing import Any, Optional

class JavaIterator(JavaObject):
    def __init__(self, target_id: Any, gateway_client: Any) -> None: ...
    def __iter__(self): ...
    def next(self): ...
    __next__: Any = ...

class JavaMap(JavaObject, MutableMapping):
    def __init__(self, target_id: Any, gateway_client: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __len__(self): ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self): ...
    def __contains__(self, key: Any): ...

class JavaSet(JavaObject, MutableSet):
    def __init__(self, target_id: Any, gateway_client: Any) -> None: ...
    def add(self, value: Any) -> None: ...
    def discard(self, value: Any) -> None: ...
    def remove(self, value: Any) -> None: ...
    def clear(self) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __contains__(self, value: Any): ...

class JavaArray(JavaObject, Sequence):
    def __init__(self, target_id: Any, gateway_client: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any): ...
    def __len__(self): ...

class JavaList(JavaObject, MutableSequence):
    java_remove: Any = ...
    def __init__(self, target_id: Any, gateway_client: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __setitem__(self, key: Any, value: Any): ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any): ...
    def __contains__(self, item: Any): ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __iadd__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __imul__(self, other: Any): ...
    def append(self, value: Any) -> None: ...
    def insert(self, key: Any, value: Any): ...
    def extend(self, other_list: Any) -> None: ...
    def pop(self, key: Optional[Any] = ...): ...
    def index(self, value: Any, start: int = ..., end: int = ...): ...
    def count(self, value: Any): ...
    def sort(self) -> None: ...
    def reverse(self) -> None: ...
    def remove(self, value: Any) -> None: ...

class SetConverter:
    def can_convert(self, object: Any): ...
    def convert(self, object: Any, gateway_client: Any): ...

class ListConverter:
    def can_convert(self, object: Any): ...
    def convert(self, object: Any, gateway_client: Any): ...

class MapConverter:
    def can_convert(self, object: Any): ...
    def convert(self, object: Any, gateway_client: Any): ...
