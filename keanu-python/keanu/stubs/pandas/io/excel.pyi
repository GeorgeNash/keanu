# Stubs for pandas.io.excel (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def read_excel(io: Any, sheet_name: int = ..., header: int = ..., names: Optional[Any] = ..., index_col: Optional[Any] = ..., usecols: Optional[Any] = ..., squeeze: bool = ..., dtype: Optional[Any] = ..., engine: Optional[Any] = ..., converters: Optional[Any] = ..., true_values: Optional[Any] = ..., false_values: Optional[Any] = ..., skiprows: Optional[Any] = ..., nrows: Optional[Any] = ..., na_values: Optional[Any] = ..., parse_dates: bool = ..., date_parser: Optional[Any] = ..., thousands: Optional[Any] = ..., comment: Optional[Any] = ..., skipfooter: int = ..., convert_float: bool = ..., **kwds: Any): ...

class ExcelFile:
    io: Any = ...
    book: Any = ...
    def __init__(self, io: Any, **kwds: Any) -> None: ...
    def __fspath__(self): ...
    def parse(self, sheet_name: int = ..., header: int = ..., names: Optional[Any] = ..., index_col: Optional[Any] = ..., usecols: Optional[Any] = ..., squeeze: bool = ..., converters: Optional[Any] = ..., true_values: Optional[Any] = ..., false_values: Optional[Any] = ..., skiprows: Optional[Any] = ..., nrows: Optional[Any] = ..., na_values: Optional[Any] = ..., parse_dates: bool = ..., date_parser: Optional[Any] = ..., thousands: Optional[Any] = ..., comment: Optional[Any] = ..., skipfooter: int = ..., convert_float: bool = ..., **kwds: Any): ...
    @property
    def sheet_names(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class ExcelWriter:
    def __new__(cls, path: Any, engine: Optional[Any] = ..., **kwargs: Any): ...
    book: Any = ...
    curr_sheet: Any = ...
    path: Any = ...
    def supported_extensions(self) -> None: ...
    def engine(self) -> None: ...
    def write_cells(self, cells: Any, sheet_name: Optional[Any] = ..., startrow: int = ..., startcol: int = ..., freeze_panes: Optional[Any] = ...) -> None: ...
    def save(self) -> None: ...
    sheets: Any = ...
    cur_sheet: Any = ...
    date_format: str = ...
    datetime_format: str = ...
    mode: Any = ...
    def __init__(self, path: Any, engine: Optional[Any] = ..., date_format: Optional[Any] = ..., datetime_format: Optional[Any] = ..., mode: str = ..., **engine_kwargs: Any) -> None: ...
    def __fspath__(self): ...
    @classmethod
    def check_extension(cls, ext: Any): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def close(self): ...

class _OpenpyxlWriter(ExcelWriter):
    engine: str = ...
    supported_extensions: Any = ...
    book: Any = ...
    def __init__(self, path: Any, engine: Optional[Any] = ..., mode: str = ..., **engine_kwargs: Any) -> None: ...
    def save(self): ...
    def write_cells(self, cells: Any, sheet_name: Optional[Any] = ..., startrow: int = ..., startcol: int = ..., freeze_panes: Optional[Any] = ...) -> None: ...

class _XlwtWriter(ExcelWriter):
    engine: str = ...
    supported_extensions: Any = ...
    book: Any = ...
    fm_datetime: Any = ...
    fm_date: Any = ...
    def __init__(self, path: Any, engine: Optional[Any] = ..., encoding: Optional[Any] = ..., mode: str = ..., **engine_kwargs: Any) -> None: ...
    def save(self): ...
    def write_cells(self, cells: Any, sheet_name: Optional[Any] = ..., startrow: int = ..., startcol: int = ..., freeze_panes: Optional[Any] = ...) -> None: ...

class _XlsxStyler:
    STYLE_MAPPING: Any = ...
    @classmethod
    def convert(cls, style_dict: Any, num_format_str: Optional[Any] = ...): ...

class _XlsxWriter(ExcelWriter):
    engine: str = ...
    supported_extensions: Any = ...
    book: Any = ...
    def __init__(self, path: Any, engine: Optional[Any] = ..., date_format: Optional[Any] = ..., datetime_format: Optional[Any] = ..., mode: str = ..., **engine_kwargs: Any) -> None: ...
    def save(self): ...
    def write_cells(self, cells: Any, sheet_name: Optional[Any] = ..., startrow: int = ..., startcol: int = ..., freeze_panes: Optional[Any] = ...) -> None: ...
